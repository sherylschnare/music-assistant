
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isMusicDirector(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Music Director';
    }

    function isLibrarian(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Librarian';
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection Rules
    match /users/{userId} {
      // Anyone can see the list of users for the login page
      allow get, list: if true;
      
      // Only the user themselves or a Music Director can update a user profile
      allow update: if isSignedIn() && (isOwner(userId) || isMusicDirector(request.auth.uid));
      
      // Only a Music Director can create or delete users
      allow create, delete: if isSignedIn() && isMusicDirector(request.auth.uid);
    }
    
    // Taxonomy Data Rules
    match /app-data/taxonomy {
       // Anyone can read the taxonomy
      allow get: if true;
      
      // Only a Music Director can write to the taxonomy
      allow write: if isSignedIn() && isMusicDirector(request.auth.uid);
    }

    // Songs Collection Rules
    match /songs/{songId} {
      // Anyone can read song data
      allow get, list: if true;
      
      // Only Music Directors or Librarians can write song data
      allow write: if isSignedIn() && (isMusicDirector(request.auth.uid) || isLibrarian(request.auth.uid));
    }

    // Concerts Collection Rules
    match /concerts/{concertId} {
       // Anyone can read concert data
      allow get, list: if true;
      
      // Only Music Directors or Librarians can write concert data
      allow write: if isSignedIn() && (isMusicDirector(request.auth.uid) || isLibrarian(request.auth.uid));
    }
  }
}
